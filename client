#!/usr/bin/python3

import json
import getopt
import socket, sys
import time

def parse_args(argv):
    client_a = ''
    client_a_role = ''
    client_b = ''
    outenc = ''
    inputfile = ''
    outputfile = ''
    kdc_ip = ''
    kdc_port = ''
    try:
        opts, args = getopt.getopt(argv,"n:m:r:s:i:o:a:p:",[])
    except getopt.GetoptError:
        print("./client -n <sender name> -m <S> -r <reciever name> -i <inputfile> -a <kdcip> -p <kdcport>")
        print("./client -n <reciever name> -m <R> -s <encrypted_content_recieved> -o <outputfile> -a <kdcip> -p <kdcport>")
        sys.exit(2)
    for opt, arg in opts:
        if opt == "-n":
            client_a = arg
        elif opt == "-m":
            client_a_role = arg
        elif opt == "-r":
            client_b = arg
        elif opt == "-s":
            outenc = arg
        elif opt == "-i":
            inputfile = arg
        elif opt == "-o":
            outputfile = arg
        elif opt == "-a":
            kdc_ip = arg
        elif opt == "-p":
            kdc_port = arg
    return (client_a, client_a_role, client_b, outenc, inputfile, outputfile, kdc_ip, kdc_port)

def send_message(data: dict, s: socket) -> str:
    json_format_data = json.dumps(data).encode('utf-8')
    s.sendall(json_format_data)
    response = s.recv(1024)
    response = json.loads(response)
    return response

def main():
    with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s:
        s.connect((kdc_ip, int(kdc_port)))
        data = dict()
        new_client = input("Are you a new client(y/n): ")
        if new_client == "y":
            # Registration with KDC
            print("Please register with KDC....")
            # u_id = input("Enter user id(integer): ")
            # ip = input("Enter ip address(15 characters max): ")
            # tcp_port = input("Enter port number: ")
            # passwd = input("Enter password(number of characters-12): ")
            # name = input("Enter name(a-z, max. string length-12): ")
            # data = {
            #     'type': 'Registration',
            #     'code': 301,
            #     'user_id': int(u_id),
            #     'ip': ip,
            #     'tcp_port': int(tcp_port),
            #     'passwd': passwd,
            #     'name': name
            # }
            # Hardcoded values-for testing
            data = {
                'type': 'Registration',
                'code': 301,
                'user_id': 1, #int(u_id),
                'ip': "10.1.1.1", #ip
                'tcp_port': 12314, #int(tcp_port),
                'passwd': 'jaskd', #passwd,
                'name': 'zameel' #name
            }
            response = send_message(data, s)
            time.sleep(2)
            if ((response['code'] == 302) and (response['name'] == data['name'])):
                print("Registration Succesful!! :)")
        if client_a_role == "S":
            # TODO: Add support for sending message to another user
            send_msg = input("Do you wish to send a message?(y/n): ")
            # if send_msg:
            # data = {
            #     'type': 'Message',
            #     'id': ,
            # }


if __name__ == "__main__":
    (client_a, client_a_role, client_b, outenc, inputfile, outputfile, kdc_ip, kdc_port) = parse_args(sys.argv[1:])
    main()