#!/usr/bin/python3

from base64 import b64decode
from cryptography.fernet import Fernet
from helper import derive_key, decrypt_msg, encrypt_msg, send_message, md5_hash
import json
import getopt
import random
import socket, sys

def parse_args(argv):
    client_a = ''
    client_a_role = ''
    client_b = ''
    outenc = ''
    inputfile = ''
    outputfile = ''
    kdc_ip = ''
    kdc_port = ''
    try:
        opts, args = getopt.getopt(argv,"n:m:r:s:i:o:a:p:",[])
    except getopt.GetoptError:
        print("./client -n <sender name> -m <S> -r <reciever name> -i <inputfile> -a <kdcip> -p <kdcport>")
        print("./client -n <reciever name> -m <R> -s <encrypted_content_recieved> -o <outputfile> -a <kdcip> -p <kdcport>")
        sys.exit(2)
    for opt, arg in opts:
        if opt == "-n":
            client_a = arg
        elif opt == "-m":
            client_a_role = arg
        elif opt == "-r":
            client_b = arg
        elif opt == "-s":
            outenc = arg
        elif opt == "-i":
            inputfile = arg
        elif opt == "-o":
            outputfile = arg
        elif opt == "-a":
            kdc_ip = arg
        elif opt == "-p":
            kdc_port = arg
    return (client_a, client_a_role, client_b, outenc, inputfile, outputfile, kdc_ip, kdc_port)

def main():
    with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s:
        s.connect((kdc_ip, int(kdc_port)))
        data = dict()
        new_client = input("Are you a new client(y/n): ")
        if new_client == "y":
            # Registration with KDC
            print("Please register with KDC....")
            passwd = input("Enter password(number of characters-12): ")
            name = input("Enter name(a-z, max. string length-12): ")
            data = {
                'type': 'Registration',
                'code': 301,
                'passwd': passwd,
                'name': name
            }
            if client_a_role == "R":
                data['port_no'] = '60000'
            send_message(data, s)
            response = s.recv(1024)
            response = json.loads(response)
            if ((response['code'] == 302) and (response['name'] == data['name'])):
                print("Registration Succesful!! :)")

        if client_a_role == "S":
            send_msg = input("Do you wish to send a message?(y/n): ")
            if send_msg == "y":
                # Message to be sent to kdc to obtain session key for
                # communication with another user.
                passwd = input("Enter your password: ")
                plain_pass = passwd+client_a
                salt = md5_hash(plain_pass)
                secret_key = derive_key(salt)
                msg_to_encrypt = {
                    'sender': client_a,
                    'reciever': client_b,
                    'nonce': random.randint(1,300)
                }
                encrypted_msg = encrypt_msg(secret_key, msg_to_encrypt)
                data = {
                    'type': 'Message',
                    'code': 305,
                    'sender': client_a,
                    'encrypted_message': encrypted_msg
                }
                send_message(data, s)
                response = json.loads(s.recv(1024))
                if response['code'] == 306:
                    # Reading message to be delivered.
                    message = dict()
                    with open(inputfile, "r") as infile:
                        message['content'] = infile.read()

                    decrypted_response = decrypt_msg(secret_key, response['msg_to_sender_encrypted'])
                    session_key = decrypted_response['session_key']
                    session_key_bytes = bytes(session_key, 'utf-8')
                    encrypted_msg = encrypt_msg(session_key_bytes, message['content'])

                    #encrypting message to be delivered using session key.
                    message_to_reciever = {
                        'code': 309,
                        'to_reciever': response['msg_to_reciever_encrypted'],
                        'sender': client_a,
                        'message': encrypted_msg
                    }
                with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as sender:
                    sender.connect(('127.0.0.1', 60000))
                    send_message(message_to_reciever, sender)

    if client_a_role == "R":
        with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as r:
            r.bind(('localhost', 60000))
            r.listen(5)
            print(f"Reciever listening on port 60000...")
            print("Waiting for connection from another client.......")
            while True:
                (client_connection_socket, address) = r.accept()
                print('Connection from ', address)
                while True:
                    data = client_connection_socket.recv(1024)
                    if not data:
                        break
                    data = json.loads(data)
                    if data['code'] == 309:
                        passwd = input("Enter your password: ")
                        plain_pass = passwd+client_a
                        salt = md5_hash(plain_pass)
                        secret_key = derive_key(salt)

                        # Displaying all recieved encrypted content.
                        with open(outenc, "w") as enc_out:
                            enc_out.write(json.dumps(data))

                        decrypted_response = decrypt_msg(secret_key, data['to_reciever'])
                        session_key = decrypted_response['session_key']
                        decrypted_msg_from_sender = decrypt_msg(session_key, data['message'])

                        # Displaying decrypted message content.
                        with open(outputfile, "w") as output:
                            output.write(str(decrypted_msg_from_sender))


if __name__ == "__main__":
    (client_a, client_a_role, client_b, outenc, inputfile, outputfile, kdc_ip, kdc_port) = parse_args(sys.argv[1:])
    main()