#!/usr/bin/python3

from cryptography.fernet import Fernet
from helper import derive_key, encrypt_msg, send_message, md5_hash
import json
import getopt
import random
import socket, sys

def parse_args(argv):
    client_a = ''
    client_a_role = ''
    client_b = ''
    outenc = ''
    inputfile = ''
    outputfile = ''
    kdc_ip = ''
    kdc_port = ''
    try:
        opts, args = getopt.getopt(argv,"n:m:r:s:i:o:a:p:",[])
    except getopt.GetoptError:
        print("./client -n <sender name> -m <S> -r <reciever name> -i <inputfile> -a <kdcip> -p <kdcport>")
        print("./client -n <reciever name> -m <R> -s <encrypted_content_recieved> -o <outputfile> -a <kdcip> -p <kdcport>")
        sys.exit(2)
    for opt, arg in opts:
        if opt == "-n":
            client_a = arg
        elif opt == "-m":
            client_a_role = arg
        elif opt == "-r":
            client_b = arg
        elif opt == "-s":
            outenc = arg
        elif opt == "-i":
            inputfile = arg
        elif opt == "-o":
            outputfile = arg
        elif opt == "-a":
            kdc_ip = arg
        elif opt == "-p":
            kdc_port = arg
    return (client_a, client_a_role, client_b, outenc, inputfile, outputfile, kdc_ip, kdc_port)

def main():
    with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s:
        s.connect((kdc_ip, int(kdc_port)))
        data = dict()
        new_client = input("Are you a new client(y/n): ")
        if new_client == "y":
            # Registration with KDC
            print("Please register with KDC....")
            # u_id = input("Enter user id(integer): ")
            # ip = input("Enter ip address(15 characters max): ")
            # tcp_port = input("Enter port number: ")
            # passwd = input("Enter password(number of characters-12): ")
            # name = input("Enter name(a-z, max. string length-12): ")
            # data = {
            #     'type': 'Registration',
            #     'code': 301,
            #     'user_id': int(u_id),
            #     'ip': ip,
            #     'tcp_port': int(tcp_port),
            #     'passwd': passwd,
            #     'name': name
            # }
            # Hardcoded values-for testing
            data = {
                'type': 'Registration',
                'code': 301,
                'user_id': 1, #int(u_id),
                'ip': "10.1.1.1", #ip
                'tcp_port': 12314, #int(tcp_port),
                'passwd': 'jaskd', #passwd,
                'name': 'tom' #name
            }
            send_message(data, s)
            response = s.recv(1024)
            response = json.loads(response)
            if ((response['code'] == 302) and (response['name'] == data['name'])):
                print("Registration Succesful!! :)")

        if client_a_role == "S":
            send_msg = input("Do you wish to send a message?(y/n): ")
            if send_msg == "y":
                # Message to be sent to kdc to obtain session key for
                # communication with another user.
                passwd = input("Enter your password: ")
                plain_pass = passwd+client_a
                salt = md5_hash(plain_pass)
                secret_key = derive_key(salt)
                msg_to_encrypt = {
                    'sender': client_a,
                    'reciever': client_b,
                    'nonce': random.randint(1,300)
                }
                encrypted_msg = encrypt_msg(secret_key, msg_to_encrypt)
                data = {
                    'type': 'Message',
                    'code': 305,
                    'sender': client_a,
                    'encrypted_message': encrypted_msg
                }
                send_message(data, s)
                response = json.loads(s.recv(1024))
                if response['code'] == 306:
                    f = Fernet(secret_key)
                    encrypted_msg_to_sender = json.dumps(response['msg_to_sender_encrypted']).encode('utf-8')
                    decrypted_response = f.decrypt(encrypted_msg_to_sender)
                    decrypted_response = json.loads(decrypted_response)
                    print(f"This is the secret key: {decrypted_response['session_key']}")
                    message_to_reciever = {
                        'code': 309,
                        'to_reciever': response['msg_to_reciever_encrypted'],
                        'sender': client_a
                    }


if __name__ == "__main__":
    (client_a, client_a_role, client_b, outenc, inputfile, outputfile, kdc_ip, kdc_port) = parse_args(sys.argv[1:])
    main()