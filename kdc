#!/usr/bin/python3

from base64 import b64encode
from cryptography.fernet import Fernet
from helper import derive_key, decrypt_msg, encrypt_msg, get_secret_key, get_user_info, md5_hash
import json
import os
from pathlib import Path, PurePath
import socket
import sys, getopt

OUTPUT_FILE = Path(__file__).resolve().parent


def parse_args(argv):
    portid = ''
    outputfile = ''
    pwdfile = ''
    try:
        opts, args = getopt.getopt(argv,"p:o:f:",[])
    except getopt.GetoptError:
        print('./kdc -p 12345 -o out.txt -f pwd.txt')
        sys.exit(2)
    for opt, arg in opts:
        if opt == "-p":
            portid = arg
        elif opt == "-o":
            outputfile = arg
        elif opt == "-f":
            pwdfile = arg
    return (portid, outputfile , pwdfile)

def main():
    # setting up a listening socket for kdc server.
    with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as serversocket:
        serversocket.bind(('localhost', int(portid)))
        serversocket.listen(5)
        print(f"Listening on port {int(portid)}")
        print("Waiting for connection from client.......")
        # client_connection_socket is different from serversocket. 
        # This new socket object is used for communication between client and server
        while True:
            (client_connection_socket, address) = serversocket.accept()
            print('Connection from', address)
            while True:
                data = client_connection_socket.recv(1024)
                if not data:
                    break
                data = json.loads(data)
                if data['type'] == "Registration":
                    plain_text = data['passwd']+data['name']
                    base64_hashed_pass_bytes = md5_hash(plain_text)
                    hashed_pass_string = base64_hashed_pass_bytes.decode("utf-8")
                    user_data = f":{data['name']}:{address[0]}:{data.get('port_no', address[1])}:{hashed_pass_string}:\n"
                    lines = []
                    # kdc storing user info in file.
                    with open(OUTPUT_FILE / pwdfile, "r+") as pwd:
                        lines = pwd.readlines()
                    with open(OUTPUT_FILE / pwdfile, "w") as pwd:
                        same_username_exists = False
                        for line in lines:
                            content = line.split(":")
                            if content[1] == data["name"]:
                                pwd.write(user_data)
                                same_username_exists = True
                            else:
                                pwd.write(line)
                        if not same_username_exists:
                            pwd.write(user_data)
                    reply = {
                        "code": 302,
                        "name": data["name"]
                    }
                elif data['type'] == 'Message':
                    # Get details and password salt of sender.
                    (ip_addr_sender, portno_sender, salt_string) = get_user_info(OUTPUT_FILE, pwdfile, data['sender'])
                    secret_key_sender = get_secret_key(salt_string)

                    # Decrypt encrypted message using shared secret key with sender.
                    decrypted_content = decrypt_msg(secret_key_sender, data['encrypted_message'])

                    # Get details and password salt of reciever.
                    (ip_addr_reciever, portno_reciever, salt_string) = get_user_info(OUTPUT_FILE, pwdfile, decrypted_content['reciever'])
                    secret_key_reciever = get_secret_key(salt_string)
                    session_key_bytes = os.urandom(32)
                    session_key = b64encode(session_key_bytes).decode('utf-8')

                    # Messages to both users
                    message_to_sender = {
                        'session_key': session_key,
                        'id_sender': data['sender'],
                        'id_reciever': decrypted_content['reciever'],
                        'nonce': decrypted_content['nonce'],
                        'ip_reciever': ip_addr_reciever,
                        'port_reciever': int(portno_reciever)
                    }
                    message_to_reciever = {
                        'session_key': session_key,
                        'id_sender': data['sender'],
                        'id_reciever': decrypted_content['reciever'],
                        'nonce': decrypted_content['nonce'],
                        'ip_sender': ip_addr_sender,
                        'port_sender': int(portno_sender)
                    }

                    # Encrypt messages to both users using their respective keys.
                    encrypted_message_to_sender = encrypt_msg(secret_key_sender, message_to_sender)
                    encrypted_message_to_reciever = encrypt_msg(secret_key_reciever, message_to_reciever)
                    reply = {
                        'code': 306,
                        'msg_to_sender_encrypted': encrypted_message_to_sender,
                        'msg_to_reciever_encrypted': encrypted_message_to_reciever
                    }
                json_format_reply = json.dumps(reply).encode('utf-8')
                client_connection_socket.sendall(json_format_reply)

if __name__ == "__main__":
   portid, outputfile, pwdfile = parse_args(sys.argv[1:])
   main()